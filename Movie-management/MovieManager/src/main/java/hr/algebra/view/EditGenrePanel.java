/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.GenreRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.GenreTableModel;
import java.time.DateTimeException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author lecturer
 */
public class EditGenrePanel extends javax.swing.JPanel {

    /**
     * Creates new form UploadArticlesPanel
     */
    public EditGenrePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbGenres = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnUpdateGenre = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        tfGenre = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 807));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbGenres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbGenresMouseClicked(evt);
            }
        });
        tbGenres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbGenresKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbGenres);

        jLabel4.setText("Genre");

        btnUpdateGenre.setText("Update");
        btnUpdateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGenreActionPerformed(evt);
            }
        });

        btnAddGenre.setText("Add");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setBackground(new java.awt.Color(255, 51, 51));
        btnDeleteGenre.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteGenre.setText("Delete");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        lbGenreError.setForeground(new java.awt.Color(255, 0, 0));
        lbGenreError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(369, 369, 369)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(btnUpdateGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDeleteGenre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(532, 532, 532))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbGenreError)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        if (!formValid()) {
            return;
        }

        try {

            Genre genre = new Genre(
                    tfGenre.getText().trim()
            );
            genreRepository.createGenre(genre);
            genresTableModel.setGenres(genreRepository.selectGenres());
            clearForm();
            MessageUtils.showInformationMessage("Success", "genre added!");
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(EditGenrePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to add genre!");
        }

    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnUpdateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGenreActionPerformed
        if (selectedgenre == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a genre to update");
            return;
        }

        if (!formValid()) {
            return;
        }

        try {
            selectedgenre.setGenreName(tfGenre.getText().trim());
            genreRepository.updateGenre(selectedgenre.getId(), selectedgenre);
            genresTableModel.setGenres(genreRepository.selectGenres());
            clearForm();
            MessageUtils.showInformationMessage("Success", "genre updated!");

        } catch (DateTimeException ex) {
            lbGenreError.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(EditGenrePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to update genre!");
        }
    }//GEN-LAST:event_btnUpdateGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        if (selectedgenre == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a genre to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog("Delete genre", "Are you sure?")) {
            try {
                genreRepository.deleteGenre(selectedgenre.getId());
                genresTableModel.setGenres(genreRepository.selectGenres());
                clearForm();
                MessageUtils.showInformationMessage("Success", "genre deleted!");
            } catch (Exception ex) {
                Logger.getLogger(EditGenrePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete genre!");
            }
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void tbGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbGenresMouseClicked
        showGenre();
    }//GEN-LAST:event_tbGenresMouseClicked

    private void tbGenresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbGenresKeyReleased
        showGenre();
    }//GEN-LAST:event_tbGenresKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnUpdateGenre;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JTable tbGenres;
    private javax.swing.JTextField tfGenre;
    // End of variables declaration//GEN-END:variables

    private static final String DIR = "assets";
    private Map<JTextComponent, JLabel> validationMap;
    private Genre selectedgenre;
    private GenreTableModel genresTableModel;
    private GenreRepository genreRepository;

    private void init() {
        try {
            initValidation();
            hideErrors();
            initRepository();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditGenrePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationMap = new LinkedHashMap<>();
        addValidationPair(tfGenre, lbGenreError);
    }

    private void addValidationPair(JTextField field, JLabel errorLabel) {
        validationMap.put(field, errorLabel);
    }

    private void hideErrors() {
        validationMap.values().forEach(label -> label.setVisible(false));
    }

    private void initRepository() throws Exception {
        genreRepository = RepositoryFactory.getRepository(GenreRepository.class);
    }

    private void initTable() throws Exception {
        tbGenres.setRowHeight(25);
        tbGenres.setAutoCreateRowSorter(true);
        tbGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        genresTableModel = new GenreTableModel(genreRepository.selectGenres());
        tbGenres.setModel(genresTableModel);
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> entry : validationMap.entrySet()) {
            JTextComponent field = entry.getKey();
            JLabel errorLabel = entry.getValue();
            String text = field.getText().trim();
            boolean isEmpty = text.isEmpty();

            ok &= !isEmpty;
            errorLabel.setVisible(isEmpty);
        }

        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationMap.keySet().forEach(field -> field.setText(""));
        selectedgenre = null;
    }

    private void showGenre() {
        clearForm();
        int selectedRow = tbGenres.getSelectedRow();
        int rowIndex = tbGenres.convertRowIndexToModel(selectedRow);
        int selectedGenreId = (int) genresTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Genre> optionalgenre = genreRepository.selectGenre(selectedGenreId);
            if (optionalgenre.isPresent()) {
                selectedgenre = optionalgenre.get();
                fillForm(selectedgenre);

            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(EditGenrePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show genre");
        }
    }

    private void fillForm(Genre genre) throws Exception {
        tfGenre.setText(genre.getGenreName());

    }

    private void loadModel(List<Genre> genres, DefaultListModel<Genre> model, JList<Genre> list) {
        model.clear();
        genres.forEach(model::addElement);
        list.setModel(model);
    }
}
