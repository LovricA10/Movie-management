/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.AdminRepository;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utilities.MessageUtils;
import java.io.File;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Lovric
 */
public class UploadMoviesPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminPanel
     */
    public UploadMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMoviesList = new javax.swing.JList<>();
        btnDeleteMovies = new javax.swing.JButton();
        btnUploadMovies = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsMoviesList);

        btnDeleteMovies.setBackground(new java.awt.Color(255, 51, 51));
        btnDeleteMovies.setText("Delete Movies");
        btnDeleteMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMoviesActionPerformed(evt);
            }
        });

        btnUploadMovies.setText("Upload Movies");
        btnUploadMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnDeleteMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMoviesActionPerformed
        try {
            boolean confirm = MessageUtils.showConfirmDialog(
                    "Confirm Delete",
                    "Are you sure you want to delete all movies and image files?"
            );
            if (!confirm) {
                return;
            }
            adminRepository.deleteAllData();
            File folder = new File(ASSETS_PATH);
            if (folder.exists() && folder.isDirectory()) {
                for (File file : folder.listFiles()) {
                    if (file.isFile()) {
                        boolean deleted = file.delete();
                        if (!deleted) {
                            System.err.println("Failed to delete: " + file.getName());
                        }
                    }
                }
            }
            loadModel();
            MessageUtils.showInformationMessage("Success", "All movies and image files deleted.");

        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Failed to delete movies and images.");
        }
    }//GEN-LAST:event_btnDeleteMoviesActionPerformed

    private void btnUploadMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadMoviesActionPerformed
        try {
            List<Movie> movies = MovieParser.parse();
            movieRepository.createMovies(movies);
            loadModel();
        } catch (Exception ex) {
            ex.printStackTrace();
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate form!");
            //System.exit(1);
        }
    }//GEN-LAST:event_btnUploadMoviesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteMovies;
    private javax.swing.JButton btnUploadMovies;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lsMoviesList;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<Movie> movieModel;
    private AdminRepository adminRepository;
    private MovieRepository movieRepository;
    private static final String ASSETS_PATH = Paths.get("").toAbsolutePath().resolve("assets").toString();

    private void init() {
        try {
            adminRepository = RepositoryFactory.getRepository(AdminRepository.class);
            movieRepository = RepositoryFactory.getRepository(MovieRepository.class);
            movieModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate form!");
            //System.exit(1);
        }
    }

    private void loadModel() throws Exception {
        List<Movie> movies = movieRepository.selectMovies();
        movieModel.clear();
        movies.forEach(movieModel::addElement);
        lsMoviesList.setModel(movieModel);
    }
}
